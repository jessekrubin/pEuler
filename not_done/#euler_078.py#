#!/usr/local/bin/python
# -*- coding: utf-8 -*-
# Jesse Rubin - project Euler
"""
Coin partitions_gen
Problem 78
Let p(n) represent the number of different ways in which n coins can be
separated into piles. For example, five coins can be separated into piles
in exactly seven different ways, so pytriple_gen(5)=7.

OOOOO
OOOO   O
OOO   OO
OOO   O   O
OO   OO   O
OO   O   O   O
O   O   O   O   O

Find the least value of n for which p=(n) is divisible by one million.
"""
from itertools import cycle


def p3(n):
    sums = [0]*(n+1)
    sums[0] = 1
    for num in range(1, n+1):
        for i in range(num, n+1):
            sums[i] += sums[i-num]
    print(sums, sum(sums))
    return sums[-1]


def p2(n):
    if n < 0:
        return 0
    if n == 0: # or n == 1 speeds up
        return 1
    # print "Call p2 with n = %i" % n
    sign = 1
    res = 0
    for k in range(1, n+1):
        term = p2(n - k*(3*k - 1)//2)+\
          p2(n - k*(3*k + 1)//2)
        res = res + sign*term
        sign = -sign
    return res


@lru_cache(maxsize=None)
def p(n):
    flipflop = cycle((1, -1))
    if n < 0:
        return 0
    if n == 0 or n == 1:
        return 1
    else:
        return sum((next(flipflop) * (p(n-k*(3*k-1)//2) + p(n-k*(3*k+1)//2)))
                   for k in range(1, n + 1))
#

@lru_cache(maxsize=None)
def pm(n, mod = 1000000):
    flipflop = cycle((1, -1))
    if n < 0:
        return 0
    if n == 0 or n == 1:
        return 1
    else:
        return sum((next(flipflop) * (pm(n-k*(3*k-1)//2) + pm(n-k*(3*k+1)//2)))
                   for k in range(1, n + 1)) % mod
## for i in range(10):
    # print(p(i), p2(i), p3(i))

# for i in range(1000):
#     print(p(i), pm(i))
from itertools import count

for i in range(55374):
    c = pm(i)
    if i%1000==0:
        print(i, pm(i))
